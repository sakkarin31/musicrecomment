import streamlit as st
import pandas as pd
import numpy as np
from tensorflow.keras.models import load_model
from annoy import AnnoyIndex  # ‡πÉ‡∏ä‡πâ Annoy
import joblib
import ast
import os

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
def add_bg_from_url():
    st.markdown(
        """
        <style>
        .stApp {
            background-image: url("https://images.unsplash.com/photo-1511671782779-c97d3d27a1d4");
            background-size: cover;
            color: #ffffff;
        }
        .title-text {
            font-size: 48px;
            font-weight: bold;
            text-align: center;
            color: #ff4b4b;
        }
        .subtitle-text {
            text-align: center;
            font-size: 20px;
            color: #ffffff;
        }
        .stButton>button {
            background-color: #ff4b4b;
            color: #ffffff;
            border-radius: 12px;
            padding: 8px 24px;
            font-size: 18px;
        }
        .song-card {
            background-color: rgba(0, 0, 0, 0.7);
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 10px;
        }
        </style>
        """,
        unsafe_allow_html=True
    )

add_bg_from_url()


@st.cache_resource
def load_models():
    autoencoder = load_model("autoencoder_model.h5", custom_objects={"mse": "mean_squared_error"})
    encoder = load_model("encoder_model.h5")
    scaler = joblib.load("scaler.pkl")
    return autoencoder, encoder, scaler


@st.cache_data
def load_data():
    df = pd.read_csv("tracks_features.csv")
    features = ['danceability', 'energy', 'key', 'loudness', 'speechiness', 
                'acousticness', 'instrumentalness', 'valence', 'tempo']
    df_clean = df.dropna(subset=features)
    X = df_clean[features].values
    return df_clean, X


# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
autoencoder, encoder, scaler = load_models()
df_clean, X = load_data()

X_scaled = scaler.transform(X)

# ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå X_encoded.npy ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
if os.path.exists("X_encoded.npy"):
    X_encoded = np.load("X_encoded.npy")
else:
    X_encoded = encoder.predict(X_scaled)
    np.save("X_encoded.npy", X_encoded)  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤ X_encoded ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå .npy

df_clean["vector"] = list(X_encoded)
X_encoded_array = np.array(X_encoded)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á Annoy Index
f = X_encoded_array.shape[1]  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡∏Å‡πÄ‡∏ï‡∏≠‡∏£‡πå
annoy_index = AnnoyIndex(f, 'angular')  # ‡πÉ‡∏ä‡πâ 'angular' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö cosine distance
for i, vector in enumerate(X_encoded_array):
    annoy_index.add_item(i, vector)
annoy_index.build(10)  # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ 10 ‡∏ï‡πâ‡∏ô


def recommend_similar(song_name, artist_name, df, top_n=5):
    song = df[(df["name"].str.lower() == song_name.lower()) & 
              (df["artists"].apply(lambda x: artist_name.lower() in [a.lower() for a in eval(x)]))]

    if song.empty:
        return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏û‡∏•‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ô Dataset"

    song_vector = np.array(song["vector"].iloc[0]).reshape(1, -1)

    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Ñ‡∏•‡∏∂‡∏á‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Annoy
    indices = annoy_index.get_nns_by_vector(song_vector.flatten(), top_n * 2, include_distances=False)
    recommended_songs = df.iloc[indices]
    recommended_songs = recommended_songs[~((recommended_songs["name"].str.lower() == song_name.lower()) &
                                            (recommended_songs["artists"].apply(lambda x: artist_name.lower() in [a.lower() for a in eval(x)])))] 

    # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    seen_songs = set()
    unique_recommendations = []
    for _, song in recommended_songs.iterrows():
        song_id = (song["name"].lower(), tuple(sorted(eval(song["artists"]))))  # ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏®‡∏¥‡∏•‡∏õ‡∏¥‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô
        if song_id not in seen_songs:
            seen_songs.add(song_id)
            unique_recommendations.append(song)
        if len(unique_recommendations) == top_n:
            break

    if not unique_recommendations:
        return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç"

    return pd.DataFrame(unique_recommendations)[["name", "artists", "album"]]


# Streamlit UI
st.markdown(
    """
    <div style="
        background-color: rgba(0, 0, 0, 0.8); 
        padding: 20px; 
        border-radius: 15px; 
        text-align: center;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.5); 
        margin-bottom: 20px;
    ">
        <h1 style="color: #ff4b4b; font-size: 50px;">üéµ Match this song üéµ</h1>
        <p style="color: #ffffff; font-size: 20px;">‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏´‡∏°‡πà‡πÜ ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡πÉ‡∏à‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢‡πÜ!</p>
    </div>
    """,
    unsafe_allow_html=True
)

song_name = st.text_input("üîç ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:")
artist_name = st.text_input("üé§ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏®‡∏¥‡∏•‡∏õ‡∏¥‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ):")

if st.button("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"):
    if song_name.strip() == "" or artist_name.strip() == "":
        st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏•‡∏∞‡∏®‡∏¥‡∏•‡∏õ‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
    else:
        result = recommend_similar(song_name, artist_name, df_clean)
        if isinstance(result, str):
            st.error(result)
        else:
            st.success("üéß ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô:")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î
            for index, row in result.iterrows():
                st.markdown(
                    f"""
                    <div class="song-card">
                        <h4>üéµ {row['name']}</h4>
                        <p>üë®‚Äçüé§ ‡∏®‡∏¥‡∏•‡∏õ‡∏¥‡∏ô: {", ".join(ast.literal_eval(row['artists']))}</p>
                        <p>üíø ‡∏≠‡∏±‡∏•‡∏ö‡∏±‡πâ‡∏°: {row['album']}</p>
                    </div>
                    """,
                    unsafe_allow_html=True
                )
